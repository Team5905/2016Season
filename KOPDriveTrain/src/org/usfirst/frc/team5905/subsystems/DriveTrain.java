// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team5905.subsystems;

import org.usfirst.frc.team5905.Robot;
import org.usfirst.frc.team5905.RobotMap;
import org.usfirst.frc.team5905.commands.*;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Counter;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.Victor;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.interfaces.Gyro;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class DriveTrain extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	
	private final SpeedController FRONT_RIGHT_SPEED_CONTROLLER = RobotMap.FRONT_RIGHT_SPEED_CONTROLLER;
	private final SpeedController BACK_RIGHT_SPEED_CONTROLLER = RobotMap.BACK_RIGHT_SPEED_CONTROLLER;
	private final SpeedController FRONT_LEFT_SPEED_CONTROLLER = RobotMap.FRONT_LEFT_SPEED_CONTROLLER;
	private final SpeedController BACK_LEFT_SPEED_CONTROLLER = RobotMap.BACK_LEFT_SPEED_CONTROLLER;
	private final RobotDrive robotDrive41 = RobotMap.driveTrain41;
	private final ADXRS450_Gyro gyro = RobotMap.driveTrainGyro;
	
	private final double LeftForwardCalibration = 1;
	private final double RightForwardCalibration = 1;
	private final double LeftBackwardCalibration = 1;
	private final double RightBackwardCalibration = 1;
	
	private static final double PVAL = 1.0;
	private static final double IVAL = 0.0;
	private static final double DVAL = 0.0;
	private static final double GYRO_TOLERANCE = 5.0;
	
	private double oldLeftSpeed = 0;
	private double oldRightSpeed = 0;
	
	private Timer timer = new Timer();
	
	private DriveTrainMode mode;
	
	private double targetTime = 0;
	private enum DriveTrainMode {
		MANUAL, DRIVE_STRAIGHT, ROTATE

	}
	// Initialize your subsystem here
	public DriveTrain() {
		RobotMap.driveTrainGyro.reset();
		
		mode = DriveTrainMode.MANUAL;
	}

	public void initDefaultCommand() {
		setDefaultCommand(new MoveWithJoysticks());
	}
	
	public void stop() {
		oldLeftSpeed = 0;
		oldRightSpeed = 0;
		smoothDrive(0.0, 0.0);		
	}

	private void smoothDrive(double left, double right) {
		// TODO: aceept a flag indicating that smoothDrive should use Gyro input and compensate
		oldLeftSpeed = RobotMath.ease(left * LeftForwardCalibration, oldLeftSpeed);
		oldRightSpeed = RobotMath.ease(right * RightForwardCalibration, oldRightSpeed);
		
		// TODO: read Gyro angle and use it to REDUCE power to one of the motors
		
		// if gyro if off by 0.5 do not bother
		// otherwise get a scaled value based on (say) 30degrees
		
		final double MAX_ANGLE_ERROR_EXPECTED = 30;
		final double MAX_DELTA_OF_SIDE = 0.25;
		final double ANGLE_ERROR_TOLERANCE = 0.5;
		
		double gyroAngle = gyro.getAngle();
		double gyroAngleAbsolute = Math.abs(gyroAngle);
		double compensationFactor = 1;
		
		//Does not allow correction for more than MAX_ANGLE_ERROR_EXPECTED
		if (gyroAngleAbsolute > MAX_ANGLE_ERROR_EXPECTED){
			gyroAngleAbsolute = MAX_ANGLE_ERROR_EXPECTED;
		}
		
		//Find an absolute compensation for the motor proportionate to the maximum angle
		if (gyroAngleAbsolute > ANGLE_ERROR_TOLERANCE) {
			compensationFactor = 1 - (gyroAngleAbsolute * MAX_DELTA_OF_SIDE / MAX_ANGLE_ERROR_EXPECTED);
		}
		
		
		if (gyroAngle < 0) 
			right = compensationFactor * oldRightSpeed;
		else 
			left = compensationFactor * oldLeftSpeed;

		
		SmartDashboard.putNumber("leftMotor", left);
		SmartDashboard.putNumber("rightMotor", right);
		SmartDashboard.putNumber("rawGyroValue", gyroAngle);

		driveCalibrated(left, right);
	}
	
	public void prepareToGoStraight() {
		mode = DriveTrainMode.DRIVE_STRAIGHT;
		gyro.reset();
		oldLeftSpeed = 0;
		oldRightSpeed = 0;
	}
	
	public void goStraight(double power){
		// TODO: send a flag indicating that smoothDrive should use Gyro input and compensate
		smoothDrive(power, power);				
	}
	
	

	public boolean isTimeUp(){
		return (timer.get() >= targetTime);
	}

	protected double returnPIDInput() {
		// Return your input value for the PID loop
		// e.g. a sensor, like a potentiometer:
		// yourPot.getAverageVoltage() / kYourMaxVoltage;

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
		SmartDashboard.putNumber("pidInput", gyro.pidGet());

		return gyro.pidGet();


		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
	}
	
	
	
	public void usePIDOutput(double output) {
//		//Use output to drive your system, like a motor
//		//e.g. yourMotor.set(output);
		SmartDashboard.putNumber("newPIDOutput", output);
		SmartDashboard.putNumber("GyroRawOutput", gyro.getAngle());		
	}
	
//	 double corrected_angle(double angle){
//			return ((angle + 360*Math.floor(0.5-angle/360))/360);
//		}

	public void moveWithJoysticks() {
		double rawLeftAxis = -1 * Robot.oi.gamepad.getRawAxis(RobotMap.LEFT_GAMEPAD_JOYSTICK);
		double rawRightAxis = -1 * Robot.oi.gamepad.getRawAxis(RobotMap.RIGHT_GAMEPAD_JOYSTICK);
		driveCalibratedSquared(rawLeftAxis, rawRightAxis);
	}

	private void driveCalibrated(double leftRawPower, double rightRawPower) {
		driveCalibratedSquared(leftRawPower, rightRawPower, false);
	}

	private void driveCalibratedSquared(double leftRawPower, double rightRawPower) {
		driveCalibratedSquared(leftRawPower, rightRawPower, true);
	}

	private void driveCalibratedSquared(double leftRawPower, double rightRawPower, boolean squaredInputs) {
		double leftPower = getCalibratedLeftPower(leftRawPower);
		double rightPower = getCalibratedRightPower(rightRawPower);

		robotDrive41.tankDrive(leftPower, rightPower, squaredInputs);
	}

	private double getCalibratedRightPower(double givenPower) {
		if (givenPower < 0) {
			return givenPower * RightBackwardCalibration;
		} else {
			return givenPower * RightForwardCalibration;
		}
	}

	private double getCalibratedLeftPower(double givenPower) {
		if (givenPower < 0) {
			return givenPower * LeftBackwardCalibration;
		} else {
			return givenPower * LeftForwardCalibration;
		}
	}

	public void driveBoth(double power) {
		driveCalibratedSquared(power, power);

	}


	
}
