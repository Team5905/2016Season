// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team5905.subsystems;

import org.usfirst.frc.team5905.Robot;
import org.usfirst.frc.team5905.RobotMap;
import org.usfirst.frc.team5905.commands.*;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Victor;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class DriveTrain extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	
	private final double LeftForwardCalibration = 1;
	private final double RightForwardCalibration = 1;
	private final double LeftBackwardCalibration = 1;
	private final double RightBackwardCalibration = 1;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController speedController1 = RobotMap.driveTrainSpeedController1;
    private final SpeedController speedController2 = RobotMap.driveTrainSpeedController2;
    private final SpeedController speedController3 = RobotMap.driveTrainSpeedController3;
    private final SpeedController speedController4 = RobotMap.driveTrainSpeedController4;
    private final RobotDrive robotDrive41 = RobotMap.driveTrainRobotDrive41;
    private final AnalogGyro analogGyro = RobotMap.driveTrainAnalogGyro;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Initialize your subsystem here
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("DriveTrain", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("DriveTrain", "PIDSubsystem Controller", getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    	setDefaultCommand(new MoveWithJoysticks());
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return analogGyro.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    public void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
    	
    	SmartDashboard.putNumber("OUTPUT FROM PID: ", output);
    }
    
    public void moveWithJoysticks() {
		double rawLeftAxis = -1 * Robot.oi.gamepad.getRawAxis(1);
		double rawRightAxis = -1 * Robot.oi.gamepad.getRawAxis(5);
		driveCalibratedSquared(rawLeftAxis, rawRightAxis);
	}
	
	private void driveCalibrated(double leftRawPower, double rightRawPower) {
		driveCalibratedSquared(leftRawPower, rightRawPower, false);
	}
	
	private void driveCalibratedSquared(double leftRawPower, double rightRawPower) {
		driveCalibratedSquared(leftRawPower, rightRawPower, true);
	}
	
	private void driveCalibratedSquared(double leftRawPower, double rightRawPower, boolean squaredInputs) {
		double leftPower = getCalibratedLeftPower(leftRawPower);
		double rightPower = getCalibratedRightPower(rightRawPower);
		
		robotDrive41.tankDrive(leftPower, rightPower, squaredInputs);
	}
	
	private double getCalibratedRightPower(double givenPower) {
		if (givenPower < 0) {
			return givenPower * RightBackwardCalibration;
		} else {
			return givenPower * RightForwardCalibration;
		}
	}
	
	private double getCalibratedLeftPower(double givenPower) {
		if (givenPower < 0) {
			return givenPower * LeftBackwardCalibration;
		} else {
			return givenPower * LeftForwardCalibration;
		}
	}

	public void driveBoth(double power) {
		driveCalibratedSquared(power, power);
		
	}
}
